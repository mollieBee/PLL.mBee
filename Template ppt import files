
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from pptx import Presentation\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from pptx.util import Inches, Pt\n",
    "from pptx.dml.color import RGBColor\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "dict_days = dict(zip(['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'], \n",
    "                     ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n",
    "                    ))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Workload per day (by Week)\n",
    "### Import Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE</th>\n",
       "      <th>WEEK</th>\n",
       "      <th>DAY</th>\n",
       "      <th>ORDERS</th>\n",
       "      <th>LINES</th>\n",
       "      <th>PCS</th>\n",
       "      <th>SKU</th>\n",
       "      <th>CITIES</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-01-02</td>\n",
       "      <td>WEEK-1</td>\n",
       "      <td>MON</td>\n",
       "      <td>776</td>\n",
       "      <td>1367</td>\n",
       "      <td>1595.0</td>\n",
       "      <td>487</td>\n",
       "      <td>174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-01-03</td>\n",
       "      <td>WEEK-1</td>\n",
       "      <td>TUE</td>\n",
       "      <td>902</td>\n",
       "      <td>1550</td>\n",
       "      <td>1861.0</td>\n",
       "      <td>547</td>\n",
       "      <td>188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-01-04</td>\n",
       "      <td>WEEK-1</td>\n",
       "      <td>WED</td>\n",
       "      <td>1476</td>\n",
       "      <td>2252</td>\n",
       "      <td>2856.0</td>\n",
       "      <td>513</td>\n",
       "      <td>205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-01-05</td>\n",
       "      <td>WEEK-1</td>\n",
       "      <td>THU</td>\n",
       "      <td>909</td>\n",
       "      <td>1637</td>\n",
       "      <td>1972.0</td>\n",
       "      <td>519</td>\n",
       "      <td>175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-01-06</td>\n",
       "      <td>WEEK-1</td>\n",
       "      <td>FRI</td>\n",
       "      <td>1023</td>\n",
       "      <td>1720</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>502</td>\n",
       "      <td>189</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         DATE    WEEK  DAY  ORDERS  LINES     PCS  SKU  CITIES\n",
       "0  2017-01-02  WEEK-1  MON     776   1367  1595.0  487     174\n",
       "1  2017-01-03  WEEK-1  TUE     902   1550  1861.0  547     188\n",
       "2  2017-01-04  WEEK-1  WED    1476   2252  2856.0  513     205\n",
       "3  2017-01-05  WEEK-1  THU     909   1637  1972.0  519     175\n",
       "4  2017-01-06  WEEK-1  FRI    1023   1720  1995.0  502     189"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Volumes per day\n",
    "df_day = pd.read_csv('volumes per day.csv', index_col=0)\n",
    "# Weeks\n",
    "LIST_WEEKS = df_day['WEEK'].unique()\n",
    "df_day.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Function to plot data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def analysis_week(df_day, WEEK):\n",
    "    \n",
    "    # Filter Scope\n",
    "    df_plot = df_day[df_day['WEEK'] ==WEEK].copy()\n",
    "\n",
    "    ''' Calculate KPIs for Comments'''\n",
    "    # Lines per orders\n",
    "    df_plot['LINES/ORDER'] = df_plot['LINES']/df_plot['ORDERS']\n",
    "    avg_ratio = '{:.2f} lines/order'.format(df_plot['LINES/ORDER'].mean())\n",
    "    max_ratio = '{:.2f} lines/order'.format(df_plot['LINES/ORDER'].max())\n",
    "\n",
    "    # Maximum Day Lines\n",
    "    busy_day = dict_days[df_plot.set_index('DAY')['LINES'].idxmax()]\n",
    "    max_lines = '{:,} lines'.format(df_plot['LINES'].max())\n",
    "\n",
    "    # Total Workload\n",
    "    total_lines = '{:,} lines'.format(df_plot['LINES'].sum())\n",
    "\n",
    "    # Bar Plot: Orders/Lines\n",
    "    fig, ax = plt.subplots(figsize=(12, 6))\n",
    "    df_plot.plot.bar(figsize=(8, 6), edgecolor='black', x='DAY', y=['ORDERS', 'LINES'], \n",
    "                     color=['tab:blue', 'tab:orange'], legend= True, ax = ax)\n",
    "    plt.xlabel('DAY', fontsize = 12)\n",
    "    plt.title('Workload per day (Lines/day)', fontsize = 12)\n",
    "#     plt.show()\n",
    "\n",
    "    # Save plot\n",
    "    filename = WEEK + \".png\"\n",
    "    path_plot = filename\n",
    "    fig.savefig(path_plot, dpi=fig.dpi)\n",
    "    \n",
    "    return avg_ratio, max_ratio, busy_day, max_lines, total_lines"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Number of Lines/Order (by Week)\n",
    "### Import Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WEEK</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>+</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>WEEK-1</td>\n",
       "      <td>5178</td>\n",
       "      <td>1265</td>\n",
       "      <td>501</td>\n",
       "      <td>304</td>\n",
       "      <td>162</td>\n",
       "      <td>494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>WEEK-2</td>\n",
       "      <td>5930</td>\n",
       "      <td>1832</td>\n",
       "      <td>756</td>\n",
       "      <td>423</td>\n",
       "      <td>211</td>\n",
       "      <td>640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>WEEK-3</td>\n",
       "      <td>5047</td>\n",
       "      <td>1490</td>\n",
       "      <td>717</td>\n",
       "      <td>360</td>\n",
       "      <td>176</td>\n",
       "      <td>550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>WEEK-4</td>\n",
       "      <td>2681</td>\n",
       "      <td>753</td>\n",
       "      <td>283</td>\n",
       "      <td>190</td>\n",
       "      <td>105</td>\n",
       "      <td>301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>WEEK-5</td>\n",
       "      <td>966</td>\n",
       "      <td>271</td>\n",
       "      <td>95</td>\n",
       "      <td>78</td>\n",
       "      <td>30</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     WEEK     1     2    3    4    5    +\n",
       "0  WEEK-1  5178  1265  501  304  162  494\n",
       "1  WEEK-2  5930  1832  756  423  211  640\n",
       "2  WEEK-3  5047  1490  717  360  176  550\n",
       "3  WEEK-4  2681   753  283  190  105  301\n",
       "4  WEEK-5   966   271   95   78   30   85"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Volumes per day\n",
    "df_lior = pd.read_csv('lines per day.csv', index_col=0)\n",
    "COLS_IN = list(df_lior.columns[0:8])\n",
    "df_lior.reset_index(inplace = True)\n",
    "df_lior.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def plot_split(df_lior):\n",
    "    \n",
    "    # Bar Plot: split per lines per orders\n",
    "    fig, ax = plt.subplots(figsize=(12, 6))\n",
    "    df_lior.plot.bar(figsize=(10, 6), edgecolor='black', x='WEEK', y=COLS_IN[0], color='tab:blue', legend= True, ax = ax)\n",
    "    df_lior.plot.bar(figsize=(10, 6), edgecolor='black', x='WEEK', y=COLS_IN[1], color='tab:red', legend= True, ax = ax)\n",
    "    df_lior.plot.bar(figsize=(10, 6), edgecolor='black', x='WEEK', y=COLS_IN[2], color='tab:orange', legend= True, ax = ax)\n",
    "    df_lior.plot.bar(figsize=(10, 6), edgecolor='black', x='WEEK', y=COLS_IN[3], color='darkblue', legend= True, ax = ax)\n",
    "    df_lior.plot.bar(figsize=(10, 6), edgecolor='black', x='WEEK', y=COLS_IN[4], color='brown', legend= True, ax = ax)\n",
    "    df_lior.plot.bar(figsize=(10, 6), edgecolor='black', x='WEEK', y=COLS_IN[5], color='grey', legend= True, ax = ax)\n",
    "    plt.xlabel('Week', fontsize = 14)\n",
    "    plt.ylabel('Number of Orders', fontsize = 14)\n",
    "    plt.title('Split of orders by number of lines/order', fontsize = 14)\n",
    "#     plt.show()\n",
    "\n",
    "    # Save plot\n",
    "    filename = 'SPLIT' + \".png\"\n",
    "    path_plot = filename\n",
    "    fig.savefig(path_plot, dpi=fig.dpi)\n",
    "\n",
    "    # Analysis\n",
    "    orders = df_lior.sum(axis = 1).sum()\n",
    "    total_orders = '{:,} orders'.format(orders)\n",
    "    \n",
    "    # Split full month\n",
    "    df_an = pd.DataFrame(100 * df_lior.set_index('WEEK').sum(axis = 0)/orders)\n",
    "    df_an.columns = ['%']\n",
    "    LIST_ANALYSIS = []\n",
    "    for l in df_an.index[0:3]:\n",
    "        LIST_ANALYSIS.append('{}% of orders with {} line(s) per order'.format(df_an.loc[l, '%'].round(1), l))\n",
    "        \n",
    "        \n",
    "    return total_orders, LIST_ANALYSIS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create PowerPoint\n",
    "> This part of code can be optimized as I am repeating some blocks for the second slide. Feel free to share your solution!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Create the presentation object\n",
    "prs = Presentation()\n",
    "\n",
    "# Layout Choice for the introduction slide\n",
    "image_slide_layout = prs.slide_layouts[5]\n",
    "page = 1\n",
    "\n",
    "'''Slide Introduction'''\n",
    "# Create the slide\n",
    "title_slide_layout = prs.slide_layouts[0]\n",
    "slide = prs.slides.add_slide(title_slide_layout)\n",
    "title = slide.shapes.title\n",
    "subtitle = slide.placeholders[1]\n",
    "background = slide.background\n",
    "fill = background.fill\n",
    "fill.solid()\n",
    "fill.fore_color.rgb = RGBColor(0, 32, 96)\n",
    "# Add Title\n",
    "title.text = \"WAREHOUSE WORKLOAD ANALYSIS\"\n",
    "title.text_frame.paragraphs[0].font.color.rgb = RGBColor(255, 255, 255)\n",
    "# Add Subtitle\n",
    "subtitle.text = 'Orders/day for the last {} weeks'.format(len(LIST_WEEKS))\n",
    "subtitle.text_frame.paragraphs[0].font.color.rgb = RGBColor(255, 255, 255)\n",
    "\n",
    "'''Slides Analysis per Week'''\n",
    "for WEEK in LIST_WEEKS:\n",
    "    \n",
    "    # Create Plot\n",
    "    avg_ratio, max_ratio, busy_day, max_lines, total_lines = analysis_week(df_day, WEEK)\n",
    "\n",
    "    # Create a slide\n",
    "    slide = prs.slides.add_slide(image_slide_layout)\n",
    "    shapes = slide.shapes\n",
    "    # Create Title\n",
    "    title_shape = shapes.title\n",
    "    title_shape.text = 'Warehouse Workload ({})'.format(WEEK)\n",
    "    # Add Image    \n",
    "    left = Inches(0.75)\n",
    "    top = Inches(1.25)\n",
    "    pic = slide.shapes.add_picture('{}.png'.format(WEEK), left, top, height=Inches(4.5))\n",
    "\n",
    "    # Build the Text Box\n",
    "    left = Inches(0.75)\n",
    "    top = Inches(1.5) + Inches(4)\n",
    "    width = Inches(9)\n",
    "    height = Inches(2)\n",
    "    txBox = slide.shapes.add_textbox(left, top, width, height)\n",
    "    tf = txBox.text_frame\n",
    "    # Title\n",
    "    p = tf.add_paragraph()\n",
    "    p.text = 'Analysis'\n",
    "    p.font.size = Pt(18)\n",
    "    # First bullet point\n",
    "    p = tf.add_paragraph()\n",
    "    p.text = '• {} have been prepared during the week'.format(total_lines)\n",
    "    p.level = 1\n",
    "    # Second bullet point\n",
    "    p = tf.add_paragraph()\n",
    "    p.text = '• {} has been the busiest day with {} prepared'.format(busy_day, max_lines)\n",
    "    p.level = 1\n",
    "    # Third bullet point\n",
    "    p = tf.add_paragraph()\n",
    "    p.text = '• {} on average with a maximum of {}'.format(avg_ratio, max_ratio)\n",
    "    p.level = 1\n",
    "    \n",
    "    # Add Pages\n",
    "    txBox = slide.shapes.add_textbox(Inches(9), Inches(6.75), Inches(1), Inches(1))\n",
    "    tf = txBox.text_frame\n",
    "    p = tf.add_paragraph()\n",
    "    p.text = str('{}/{}'.format(page, len(LIST_WEEKS) + 1 ))\n",
    "    p.font.size = Pt(15)\n",
    "    page += 1\n",
    "    \n",
    "# Add Analysis lines\n",
    "total_orders, LIST_ANALYSIS = plot_split(df_lior)\n",
    "# Create a slide\n",
    "slide = prs.slides.add_slide(image_slide_layout)\n",
    "shapes = slide.shapes\n",
    "# Create Title\n",
    "title_shape = shapes.title\n",
    "title_shape.text = 'Order Profile'\n",
    "# Add Image\n",
    "left = Inches(0.75)\n",
    "top = Inches(1.25)\n",
    "pic = slide.shapes.add_picture('{}.png'.format('SPLIT'), left, top, height=Inches(4.5))\n",
    "# Build the Text Box\n",
    "left = Inches(0.75)\n",
    "top = Inches(1.5) + Inches(4)\n",
    "width = Inches(9)\n",
    "height = Inches(2)\n",
    "txBox = slide.shapes.add_textbox(left, top, width, height)\n",
    "tf = txBox.text_frame\n",
    "p = tf.add_paragraph()\n",
    "p.text = '{} prepared'.format(total_orders)\n",
    "p.font.size = Pt(18)\n",
    "for l in LIST_ANALYSIS:\n",
    "    # First bullet point\n",
    "    p = tf.add_paragraph()\n",
    "    p.text = '• {}'.format(l)\n",
    "    p.level = 1\n",
    "# Add Pages\n",
    "txBox = slide.shapes.add_textbox(Inches(9), Inches(6.75), Inches(1), Inches(1))\n",
    "tf = txBox.text_frame\n",
    "p = tf.add_paragraph()\n",
    "p.text = str('{}/{}'.format(page, len(LIST_WEEKS) +1))\n",
    "p.font.size = Pt(15)\n",
    "page += 1\n",
    "\n",
    "# Save\n",
    "prs.save('Warehouse Workload Report.pptx')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
