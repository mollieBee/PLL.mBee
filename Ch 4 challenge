# Python Object Oriented Programming by Joe Marini course example
# Programming challenge: implement a dataclass

from dataclasses import dataclass
from abc import ABC, abstractmethod
# Challenge: convert your classes to dataclasses
# The subclasses are required to override the magic method
# that makes them sortable

#Note: can use default values, but keep in mind those instances need to come first
#You can also use the field function to declare a default value so it would look like - price: float = field(default = 10.0)
#You can also use a function  which would look like -  price: float = field(default_factory=price_func
#def price_func():
#    return float(random.randrange(20,40)

from dataclasses import dataclass
@dataclass
class Asset(ABC):
    def __init__(self, price):
        #self.price = price
        price: float

    @abstractmethod
    def __str__(self):
        pass

class Stock(Asset):
    def __init__(self, ticker, price, company):
        super().__init__(price)
        #self.company = company
        #self.ticker = ticker
        company: str
        ticker: str
  
class Bond(Asset):
    def __init__(self, price, description, duration, yieldamt):
        super().__init__(price)
        #self.description = description
        #self.duration = duration
        #self.yieldamt = yieldamt
        description: str
        duration: float
        yieldamt: float

# ~~~~~~~~~ TEST CODE ~~~~~~~~~
stocks = [
    Stock("MSFT", 342.0, "Microsoft Corp"),
    Stock("GOOG", 135.0, "Google Inc"),
    Stock("META", 275.0, "Meta Platforms Inc"),
    Stock("AMZN", 120.0, "Amazon Inc")
]
bonds = [
    Bond(95.31, "30 Year US Treasury", 30, 4.38),
    Bond(96.70, "10 Year US Treasury", 10, 4.28),
    Bond(98.65, "5 Year US Treasury", 5, 4.43),
    Bond(99.57, "2 Year US Treasury", 2, 4.98)
]
try:
   ast = Asset(100.0)
except:
   print("Can't instantiate Asset!")
stocks.sort()
bonds.sort()
